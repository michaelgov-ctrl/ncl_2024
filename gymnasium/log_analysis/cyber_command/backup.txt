package main

import (
	"bytes"
	"encoding/binary"
	"fmt"
	"io"
	"log"
	"os"
)

type Header struct {
	Magic        [8]byte
	Version      uint8
	Timestamp    [4]byte
	HostnameLen  uint32
	Hostname     []byte
	FlagLen      uint32
	Flag         []byte
	NumOfEntries uint32
}

type BodyItem struct {
	SourceIp         uint32
	DestIp           uint32
	Timestamp        [4]byte
	BytesTransferred uint32
}

type SkyPacket struct {
	Header
	Body []BodyItem
}

func main() {
	data, err := os.ReadFile("custom_file_format.sky")
	if err != nil {
		log.Fatalf("%s\n", err)
	}

	reader := bytes.NewReader(data)

	packet, err := ReadSkyFile(reader)
	if err != nil {
		log.Fatalf("%s\n", err)
	}

	fmt.Printf("%s\n", packet.Body)

}

func ReadSkyFile(r *bytes.Reader) (*SkyPacket, error) {
	var packet SkyPacket

	binary.Read(r, binary.BigEndian, &packet.Header)

	for {
		var bi BodyItem
		err := binary.Read(r, binary.BigEndian, &bi.SourceIp)
		if err != nil {
			if err == io.EOF {
				break
			}

			return nil, fmt.Errorf("error reading body: %s", err)
		}

		binary.Read(r, binary.BigEndian, &bi.DestIp)
		binary.Read(r, binary.BigEndian, &bi.Timestamp)
		binary.Read(r, binary.BigEndian, &bi.BytesTransferred)

		packet.Body = append(packet.Body, bi)
	}

	return &packet, nil
}
